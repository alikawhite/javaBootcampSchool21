package edu.school21.spring.service.repositories;import edu.school21.spring.service.models.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;import org.springframework.stereotype.Component;import javax.sql.DataSource;import java.util.List;import java.util.Optional;@Component("usersRepositoryJdbcTemplateImplBean")public class UsersRepositoryJdbcTemplateImpl implements UsersRepository {    private final NamedParameterJdbcTemplate jdbcTemplate;    @Autowired    public UsersRepositoryJdbcTemplateImpl(@Qualifier("hikariDataSource") DataSource dataSource) {        this.jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);    }    @Override    public User findById(Long id) {        String findByIdQuery = "SELECT * FROM test.user WHERE id = :id"; // SQL запрос с именованным параметром        return jdbcTemplate.query(findByIdQuery,                        new MapSqlParameterSource().addValue("id", id),                        new BeanPropertyRowMapper<>(User.class))                .stream().findAny().orElse(null);    }    @Override    public List<User> findAll() {        String findAllQuery = "SELECT * FROM test.user";        return jdbcTemplate.query(findAllQuery, new BeanPropertyRowMapper<>(User.class))                .stream().toList();    }    @Override    public void save(User entity) {        String saveQuery = "INSERT INTO test.user(id, email, password) VALUES (:id, :email, :password)";        if (jdbcTemplate.update(saveQuery, new MapSqlParameterSource().addValue("id",                entity.getId()).addValue("email", entity.getEmail()).addValue("password", entity.getPassword())) == 0)            System.err.println("User wasn't saved with id: " + entity.getId());    }    @Override    public void update(User entity) {        String updateQuery = "UPDATE test.user SET email = :email WHERE id = :id";        if (jdbcTemplate.update(updateQuery, new MapSqlParameterSource().addValue("id",                entity.getId()).addValue("email", entity.getEmail())) == 0)            System.err.println("User wasn't updated with id: " + entity.getId());    }    @Override    public void delete(Long id) {        String updateQuery = "DELETE FROM test.user WHERE id = :id";        if (jdbcTemplate.update(updateQuery, new MapSqlParameterSource().addValue("id", id)) == 0)            System.err.println("User wasn't deleted with id: " + id);    }    @Override    public Optional<User> findByEmail(String email) {        String updateQuery = "SELECT * FROM test.user WHERE email = :email";        return jdbcTemplate.query(updateQuery,                        new MapSqlParameterSource().addValue("email", email),                        new BeanPropertyRowMapper<>(User.class))                .stream().findAny();    }}
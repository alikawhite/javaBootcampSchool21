package edu.school21.spring.service.repositories;import edu.school21.spring.service.models.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Component;import javax.sql.DataSource;import java.sql.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Component("usersRepositoryJdbcImplBean")public class UsersRepositoryJdbcImpl implements UsersRepository {    private final DataSource dataSource;    @Autowired    public UsersRepositoryJdbcImpl(@Qualifier("driverManagerDataSource") DataSource dataSource) {        this.dataSource = dataSource;    }    @Override    public User findById(Long id) {        try (Connection connection = dataSource.getConnection();             Statement statement = connection.createStatement()) {            String findByIdQuery = "SELECT * FROM test.user WHERE id = ";            ResultSet resultSet = statement.executeQuery(findByIdQuery + id);            if (!resultSet.next()) return null;            return new User(resultSet.getLong(1),                    resultSet.getString(2));        } catch (SQLException e) {            System.out.println(e.getMessage());        }        return null;    }    @Override    public List<User> findAll() {        List<User> list = new ArrayList<>();        String findAllQuery = "SELECT * FROM test.user";        try (Connection connection = dataSource.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(findAllQuery)) {            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                User user = new User(resultSet.getLong(1),                        resultSet.getString(2));                list.add(user);            }        } catch (SQLException e) {            System.out.println(e.getMessage());        }        return list;    }    @Override    public void save(User entity) {        String saveQuery = "INSERT INTO test.user(email) VALUES (?)";        try (Connection connection = dataSource.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(saveQuery)) {            preparedStatement.setString(1, entity.getEmail());            preparedStatement.execute();        } catch (SQLException e) {            System.out.println(e.getMessage());        }    }    @Override    public void update(User entity) {        try (Connection connection = dataSource.getConnection()) {            String updateQuery = "UPDATE test.user SET email = ? WHERE id = ?";            PreparedStatement statement = connection.prepareStatement(updateQuery);            statement.setString(1, entity.getEmail());            statement.setLong(2, entity.getId());            statement.executeUpdate();        } catch (SQLException e) {            System.out.println(e.getMessage());        }    }    @Override    public void delete(Long id) {        try (Connection connection = dataSource.getConnection();             Statement statement = connection.createStatement()) {            String deleteQuery = "DELETE FROM test.user WHERE id = ";            statement.executeQuery(deleteQuery + id);        } catch (SQLException e) {            System.out.println(e.getMessage());        }    }    @Override    public Optional<User> findByEmail(String email) {        try (Connection connection = dataSource.getConnection();             Statement statement = connection.createStatement()) {            String findByEmailQuery = "SELECT * FROM test.user WHERE email = ";            ResultSet resultSet = statement.executeQuery(findByEmailQuery + email);            if (!resultSet.next()) return Optional.empty();            return Optional.of(new User(resultSet.getLong(1),                    resultSet.getString(2)));        } catch (SQLException e) {            System.out.println(e.getMessage());        }        return Optional.empty();    }}
package ex01;import java.io.*;import java.util.*;public class Main {    private static List<String> dict = new ArrayList<>();    private static int[] firstMass;    private static int[] secondMass;    public static void main(String[] args) {        if (args.length != 2) {            System.err.println("Pass 2 files as arguments");            System.exit(-1);        }        try (BufferedWriter fileWriter = new BufferedWriter(new FileWriter("dictionary.txt"))) {            BufferedReader firstFile = new BufferedReader(new FileReader(args[0]));            BufferedReader secondFile = new BufferedReader(new FileReader(args[1]));            createDictionary(firstFile);            createDictionary(secondFile);            firstFile.close();            secondFile.close();            Collections.sort(dict);            BufferedReader first = new BufferedReader(new FileReader(args[0]));            BufferedReader second = new BufferedReader(new FileReader(args[1]));            firstMass = createVector(first);            secondMass = createVector(second);            first.close();            second.close();            System.out.printf("Similarity = %.2f\n", calculate());        } catch (IOException e) {            e.printStackTrace();        }    }    private static void createDictionary(BufferedReader file) throws IOException {        String string;        while ((string = file.readLine()) != null) {            String[] words = string.toLowerCase().split(" ");            for (String word : words) {                if (!dict.contains(word) && !word.isEmpty()) dict.add(word);            }        }    }    private static int[] createVector(BufferedReader file) throws IOException {        int[] result = new int[dict.size()];        int i;        String string;        while ((string = file.readLine()) != null) {            String[] words = string.toLowerCase().split(" ");            for (String word : words) {                if (!word.isEmpty()) {                    i = dict.indexOf(word);                    result[i]++;                }            }        }        return result;    }    private static double calculate() {        double mul = 0, sqrtA = 0, sqrtB = 0;        for (int i = 0; i < dict.size(); ++i) {            mul += firstMass[i] * secondMass[i];            sqrtA += firstMass[i] * firstMass[i];            sqrtB += secondMass[i] * secondMass[i];        }        return mul / (Math.sqrt(sqrtA) * Math.sqrt(sqrtB));    }}
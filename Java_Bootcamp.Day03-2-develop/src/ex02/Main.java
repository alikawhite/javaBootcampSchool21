package ex02;import java.util.Random;public class Main {    public static void main(String[] args) {        if (args.length != 2 || !args[0].startsWith("--arraySize=") || !args[1].startsWith("--threadsCount=")) {            System.err.println("Error!!");            System.exit(-1);        }        int arraySize = Integer.parseInt(args[0].substring("--arraySize=".length()));        int threadsCount = Integer.parseInt(args[1].substring("--threadsCount=".length()));        if (arraySize < 1 || threadsCount < 1 || arraySize > 2000000 ||                (int) Math.ceil((double) arraySize / threadsCount) > 1000 || arraySize < threadsCount) {            System.err.println("Error!!");            System.exit(-1);        }        int start = 0, result = 0, step = (int) Math.ceil((double) arraySize / threadsCount);        int[] mass = new int[arraySize];        Random random = new Random();        for (int i = 0; i < arraySize; i++) {            mass[i] = random.nextInt(100);        }        for (int i = 0; i < arraySize; ++i) result += mass[i];        System.out.println("\nSum: " + result);        Thread[] threads = new Thread[threadsCount];        ShareSum shareSum = new ShareSum();        for (Thread thread : threads) {            if (start + step >= arraySize) thread = new Thread(new Counter(start, arraySize, mass, shareSum));            else thread = new Thread(new Counter(start, start + step, mass, shareSum));            start += step;            thread.start();            try {                thread.join();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println("Sum by threads: " + shareSum.getSum());    }}
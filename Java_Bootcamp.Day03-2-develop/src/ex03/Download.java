package ex03;import java.io.*;import java.net.URI;import java.net.URL;import java.net.URLConnection;import java.util.List;public class Download implements Runnable {    private final List<Resources> list;    private final int num;    private int maxRetry = 20;    Download(List<Resources> list, int num) {        this.list = list;        this.num = num;    }    @Override    public void run() {        for (Resources el : list) {            if (!el.isDownload()) downloadFileWithRetry(el);        }    }    private synchronized boolean downloadFile(Resources el) {        if (el.getUrl() == null) return true;        el.setDownload(true);        String[] strings = el.getUrl().split("/");        System.out.println("Thread-" + num + " start download file number " + el.getFileNum());        try (FileOutputStream outputStream = new FileOutputStream(System.getProperty("user.home")+"/" + strings[strings.length - 1])) {            URI uri = URI.create(el.getUrl());            URL url = uri.toURL();            URLConnection connection = url.openConnection();            InputStream inputStream = connection.getInputStream();            byte[] buffer = new byte[16384];            int bytesRead;            while ((bytesRead = inputStream.read(buffer)) != -1) {                outputStream.write(buffer, 0, bytesRead);            }            System.out.println("Thread-" + num + " finish download file number " + el.getFileNum());            inputStream.close();        } catch (IOException | RuntimeException e) {            el.setDownload(false);            return false;        }        return true;    }    private synchronized void downloadFileWithRetry(Resources el) {        for (int i = 0; i < maxRetry; ++i) {            boolean idDownload = downloadFile(el);            if (idDownload) return;        }        System.out.println("За " + maxRetry + " попыток не удалось скачать файл(((");    }}